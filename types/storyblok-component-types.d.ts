// This file was generated by the storyblok CLI.
// DO NOT MODIFY THIS FILE BY HAND.
import type { ISbStoryData } from "storyblok";
export interface AtomBlockQuoteStoryblok {
  quote: string;
  textAlignment: "" | "left" | "right";
  component: "atomBlockQuote";
  _uid: string;
  [k: string]: any;
}

export interface RichtextStoryblok {
  type: string;
  content?: RichtextStoryblok[];
  marks?: RichtextStoryblok[];
  attrs?: any;
  text?: string;
  [k: string]: any;
}

export interface AtomBodyCopyStoryblok {
  textAlignment: "" | "left" | "right";
  richText: RichtextStoryblok;
  component: "atomBodyCopy";
  _uid: string;
  [k: string]: any;
}

export type MultilinkStoryblok =
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      anchor?: string;
      rel?: string;
      title?: string;
      prep?: string;
      linktype: "story";
      story?: {
        name: string;
        created_at?: string;
        published_at?: string;
        id: number;
        uuid: string;
        content?: {
          [k: string]: any;
        };
        slug: string;
        full_slug: string;
        sort_by_date?: null | string;
        position?: number;
        tag_list?: string[];
        is_startpage?: boolean;
        parent_id?: null | number;
        meta_data?: null | {
          [k: string]: any;
        };
        group_id?: string;
        first_published_at?: string;
        release_id?: null | number;
        lang?: string;
        path?: null | string;
        alternates?: any[];
        default_full_slug?: null | string;
        translated_slugs?: null | any[];
        [k: string]: any;
      };
      [k: string]: any;
    }
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      linktype: "url";
      rel?: string;
      title?: string;
      [k: string]: any;
    }
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      email?: string;
      linktype: "email";
      [k: string]: any;
    }
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      linktype: "asset";
      [k: string]: any;
    };

export interface AtomCircularCtaStoryblok {
  text: string;
  link: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  component: "atomCircularCta";
  _uid: string;
  [k: string]: any;
}

export interface AtomFixedContentStoryblok {
  type: "" | "wol-logo" | "homeviews";
  component: "atomFixedContent";
  _uid: string;
  [k: string]: any;
}

export interface AtomPointOfInterestStoryblok {
  title: string;
  distanceInMinutes: string;
  coordinates?: any;
  lat?: string;
  lng?: string;
  component: "atomPointOfInterest";
  _uid: string;
  [k: string]: any;
}

export interface AtomSingleBrowStoryblok {
  brow: string;
  component: "atomSingleBrow";
  _uid: string;
  [k: string]: any;
}

export interface AtomSingleCtaStoryblok {
  text: string;
  link: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  useMatterportLink?: boolean;
  TrackingEvent?: string;
  component: "atomSingleCta";
  _uid: string;
  [k: string]: any;
}

export interface AtomSingleFactStoryblok {
  content?: string;
  component: "atomSingleFact";
  _uid: string;
  [k: string]: any;
}

export interface AtomSingleIconStoryblok {
  icon: number | string;
  theme?: "" | "default" | "red" | "pink" | "green" | "blue";
  component: "atomSingleIcon";
  _uid: string;
  [k: string]: any;
}

export interface AssetStoryblok {
  alt: string | null;
  copyright?: string | null;
  fieldtype: "asset";
  id: number;
  filename: string | null;
  name: string;
  title: string | null;
  focus: string | null;
  meta_data?: {
    [k: string]: any;
  };
  source?: string | null;
  is_external_url?: boolean;
  is_private?: boolean;
  src?: string;
  updated_at?: string;
  width?: number | null;
  height?: number | null;
  aspect_ratio?: number | null;
  public_id?: string | null;
  content_type?: string;
  [k: string]: any;
}

export interface AtomSingleMediaStoryblok {
  media: AssetStoryblok;
  fullWidth?: boolean;
  alignment: "" | "left" | "right";
  component: "atomSingleMedia";
  _uid: string;
  [k: string]: any;
}

export interface AtomSingleMediaTileStoryblok {
  media: AssetStoryblok;
  fullWidth?: boolean;
  pattern?: "" | "left" | "right";
  component: "atomSingleMediaTile";
  _uid: string;
  [k: string]: any;
}

export interface AtomSingleParagraphStoryblok {
  richText: RichtextStoryblok;
  component: "atomSingleParagraph";
  _uid: string;
  [k: string]: any;
}

export interface AtomSingleTitleStoryblok {
  title: string;
  component: "atomSingleTitle";
  _uid: string;
  [k: string]: any;
}

export interface AtomSpacedTitleStoryblok {
  title: string;
  component: "atomSpacedTitle";
  _uid: string;
  [k: string]: any;
}

export interface AtomUniqueSellingPointStoryblok {
  title?: string;
  description?: string;
  icon: number | string;
  component: "atomUniqueSellingPoint";
  _uid: string;
  [k: string]: any;
}

export interface DataApartmentTypesStoryblok {
  key: string;
  image: AssetStoryblok;
  sizeRange: string;
  component: "dataApartmentTypes";
  _uid: string;
  [k: string]: any;
}

export interface DataCallToActionStoryblok {
  title: string;
  text?: string;
  button: AtomSingleCtaStoryblok[];
  component: "dataCallToAction";
  _uid: string;
  [k: string]: any;
}

export interface DataMagazineHighlightStoryblok {
  logo: AssetStoryblok;
  media: AssetStoryblok;
  quote?: string;
  citation: string;
  component: "dataMagazineHighlight";
  _uid: string;
  [k: string]: any;
}

export interface DataNavItemStoryblok {
  link: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  description?: string;
  component: "dataNavItem";
  _uid: string;
  [k: string]: any;
}

export interface DataPerksStoryblok {
  body?: (AtomSingleTitleStoryblok | AtomSingleParagraphStoryblok)[];
  perks?: (ISbStoryData<DataTextIconPairStoryblok> | string)[];
  component: "dataPerks";
  _uid: string;
  [k: string]: any;
}

export interface DataPointsOfInterestStoryblok {
  icon: number | string;
  brow?: string;
  hideFirstMins?: boolean;
  pointsOfInterest: AtomPointOfInterestStoryblok[];
  component: "dataPointsOfInterest";
  _uid: string;
  [k: string]: any;
}

export interface DataSingleFaqStoryblok {
  content?: RichtextStoryblok;
  component: "dataSingleFaq";
  _uid: string;
  [k: string]: any;
}

export interface DataSingleReviewStoryblok {
  starRating: string;
  text: string;
  residentSince: string;
  residentSignature: AssetStoryblok;
  component: "dataSingleReview";
  _uid: string;
  [k: string]: any;
}

export interface DataSingleStepStoryblok {
  body?: (AtomSingleTitleStoryblok | AtomSingleCtaStoryblok | AtomSingleParagraphStoryblok)[];
  component: "dataSingleStep";
  _uid: string;
  [k: string]: any;
}

export interface DataSocialLinkStoryblok {
  url: string;
  icon: number | string;
  component: "dataSocialLink";
  _uid: string;
  [k: string]: any;
}

export interface DataTextIconPairStoryblok {
  icon: number | string;
  component: "dataTextIconPair";
  _uid: string;
  [k: string]: any;
}

export type MultiassetStoryblok = {
  alt: string | null;
  copyright?: string | null;
  fieldtype: "asset";
  id: number;
  filename: string | null;
  name: string;
  title: string | null;
  focus: string | null;
  meta_data?: {
    [k: string]: any;
  };
  source?: string | null;
  is_external_url?: boolean;
  is_private?: boolean;
  src?: string;
  updated_at?: string;
  width?: number | null;
  height?: number | null;
  aspect_ratio?: number | null;
  public_id?: string | null;
  content_type?: string;
  [k: string]: any;
}[];

export interface DataTextWithCarouselStoryblok {
  body: (AtomFixedContentStoryblok | AtomSingleParagraphStoryblok | AtomSingleTitleStoryblok)[];
  media?: MultiassetStoryblok;
  smallPrint?: string;
  component: "dataTextWithCarousel";
  _uid: string;
  [k: string]: any;
}

export interface MetaGlobalOptionsStoryblok {
  brandVideo?: AssetStoryblok;
  address: string;
  telephone: string;
  email: string;
  socialLinks?: (ISbStoryData<DataSocialLinkStoryblok> | string)[];
  openingDate?: string;
  locationPois: (ISbStoryData<DataPointsOfInterestStoryblok> | string)[];
  locationPoisTitle: (AtomSingleBrowStoryblok | AtomSingleIconStoryblok | AtomSingleTitleStoryblok)[];
  footerFormTitle?: string;
  footerFormConsent: RichtextStoryblok;
  footerNavigation?: AtomSingleCtaStoryblok[];
  footerSecondaryNavigation?: AtomSingleCtaStoryblok[];
  footerPoliciesNavigation?: AtomSingleCtaStoryblok[];
  footerCompanyInfo?: string;
  homeviewsOverallScore?: string;
  homeviewsOverallCount?: string;
  desktopNavigation?: any;
  desktopNavItems: (MetaNavItemStoryblok | DataNavItemStoryblok | MoleculeNavSectionStoryblok)[];
  mobileNavigation?: any;
  mobileNavItems: (ISbStoryData<DataNavItemStoryblok> | string)[];
  mobileCta?: ISbStoryData<DataCallToActionStoryblok> | string;
  mobileSecondaryNavItems?: AtomSingleCtaStoryblok[];
  apartmentTypes?: DataApartmentTypesStoryblok[];
  component: "metaGlobalOptions";
  _uid: string;
  [k: string]: any;
}

export interface MoleculeIconListStoryblok {
  iconList: (ISbStoryData<DataTextIconPairStoryblok> | string)[];
  hideIconsOnMobile?: boolean;
  component: "moleculeIconList";
  _uid: string;
  [k: string]: any;
}

export interface MoleculeNavSectionStoryblok {
  title: string;
  navItems: (ISbStoryData<DataNavItemStoryblok> | string)[];
  displayContact?: boolean;
  component: "moleculeNavSection";
  _uid: string;
  [k: string]: any;
}

export interface MoleculeParagraphColumnsStoryblok {
  columns: AtomSingleParagraphStoryblok[];
  component: "moleculeParagraphColumns";
  _uid: string;
  [k: string]: any;
}

export interface MoleculeSectionTitleStoryblok {
  sectionTitle: (
    | AtomSingleCtaStoryblok
    | AtomSingleBrowStoryblok
    | AtomSingleTitleStoryblok
    | AtomSingleParagraphStoryblok
    | DataTextIconPairStoryblok
    | MoleculeIconListStoryblok
  )[];
  component: "moleculeSectionTitle";
  _uid: string;
  [k: string]: any;
}

export interface MoleculeSingleCardStoryblok {
  body: (AtomSingleBrowStoryblok | AtomSingleTitleStoryblok | AtomSingleParagraphStoryblok)[];
  media: AssetStoryblok;
  component: "moleculeSingleCard";
  _uid: string;
  [k: string]: any;
}

export interface MoleculeTextMediaColsStoryblok {
  columns: (AtomSingleMediaStoryblok | AtomBodyCopyStoryblok)[];
  component: "moleculeTextMediaCols";
  _uid: string;
  [k: string]: any;
}

export interface OrganismTextContentStoryblok {
  content?: (
    | MoleculeTransportLinksStoryblok
    | MoleculeTextBlockStoryblok
    | MoleculeBenefitsListStoryblok
    | AtomSingleCtaStoryblok
  )[];
  component: "organismTextContent";
  _uid: string;
  [k: string]: any;
}

export interface PaStoryblok {
  component: "pa";
  _uid: string;
  [k: string]: any;
}

export interface SectionAmenitiesCarouselStoryblok {
  pretitle?: string;
  title?: AtomSpacedTitleStoryblok[];
  body?: (AtomSingleBrowStoryblok | AtomSingleTitleStoryblok | AtomSingleParagraphStoryblok)[];
  amenities: (ISbStoryData<MoleculeSingleCardStoryblok> | string)[];
  invertOrder?: boolean;
  component: "sectionAmenitiesCarousel";
  _uid: string;
  [k: string]: any;
}

export interface SectionApartmentFloorplansStoryblok {
  body: (AtomSingleBrowStoryblok | AtomSingleTitleStoryblok | AtomSingleParagraphStoryblok)[];
  Floorplans?: any;
  smallPrint?: string;
  studioPlan: AssetStoryblok;
  oneBedPlan: AssetStoryblok;
  twoBedPlan: AssetStoryblok;
  threeBedPlan: AssetStoryblok;
  component: "sectionApartmentFloorplans";
  _uid: string;
  [k: string]: any;
}

export interface SectionApartmentTypesStoryblok {
  sectionTitle: (
    | AtomSingleBrowStoryblok
    | AtomSingleTitleStoryblok
    | AtomSingleCtaStoryblok
    | MoleculeParagraphColumnsStoryblok
  )[];
  skyBackgroundEnabled?: boolean;
  component: "sectionApartmentTypes";
  _uid: string;
  [k: string]: any;
}

export interface SectionCardsBlockStoryblok {
  sectionTitle?: (
    | AtomSingleBrowStoryblok
    | AtomSingleCtaStoryblok
    | AtomSingleIconStoryblok
    | MoleculeParagraphColumnsStoryblok
    | AtomSingleTitleStoryblok
  )[];
  body: (AtomSingleCardStoryblok | MoleculeSingleCardStoryblok)[];
  component: "sectionCardsBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionContactFormStoryblok {
  title: string;
  consentTitle: string;
  consentText: RichtextStoryblok;
  buttonText: string;
  component: "sectionContactForm";
  _uid: string;
  [k: string]: any;
}

export interface SectionEmbeddedFormStoryblok {
  title?: string;
  formId: string;
  component: "sectionEmbeddedForm";
  _uid: string;
  [k: string]: any;
}

export interface SectionFactsBlockStoryblok {
  body: (AtomSingleTitleStoryblok | AtomSingleBrowStoryblok)[];
  facts: AtomSingleFactStoryblok[];
  component: "sectionFactsBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionFaqBlockStoryblok {
  title: string;
  faqs?: (ISbStoryData<DataSingleFaqStoryblok> | string)[];
  component: "sectionFaqBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionFaqBlockScannerStoryblok {
  component: "sectionFaqBlockScanner";
  _uid: string;
  [k: string]: any;
}

export interface SectionFeaturedHomesStoryblok {
  items: (ISbStoryData<TemplateRoomStoryblok> | string)[];
  featuredTitle: string;
  featuredSubtitle: string;
  recentTitle: string;
  recentSubtitle: string;
  component: "sectionFeaturedHomes";
  _uid: string;
  [k: string]: any;
}

export interface SectionFitTextAndCardsStoryblok {
  pretitle?: string;
  title: AtomSpacedTitleStoryblok[];
  subtitle?: string;
  thinnerThanFullWidth?: boolean;
  theme?: "" | "default" | "pink";
  cards?: (AtomSingleCardStoryblok | MoleculeSingleCardStoryblok)[];
  component: "sectionFitTextAndCards";
  _uid: string;
  [k: string]: any;
}

export interface SectionGalleryCarouselStoryblok {
  media: MultiassetStoryblok;
  component: "sectionGalleryCarousel";
  _uid: string;
  [k: string]: any;
}

export interface SectionGenericContentStoryblok {
  body: (
    | AtomSingleCtaStoryblok
    | AtomSingleBrowStoryblok
    | AtomSingleTitleStoryblok
    | MoleculeParagraphColumnsStoryblok
    | DataTextIconPairStoryblok
    | AtomFixedContentStoryblok
  )[];
  theme?: "" | "maroon" | "pink";
  component: "sectionGenericContent";
  _uid: string;
  [k: string]: any;
}

export interface SectionGenericHeroStoryblok {
  sectionTitle: (AtomSingleBrowStoryblok | AtomSingleTitleStoryblok)[];
  displayOpeningDate?: boolean;
  images: MultiassetStoryblok;
  component: "sectionGenericHero";
  _uid: string;
  [k: string]: any;
}

export interface SectionHeroBlockStoryblok {
  body?: (AtomSingleBrowStoryblok | AtomSingleTitleStoryblok | AtomSingleParagraphStoryblok)[];
  media: MultiassetStoryblok;
  showMediaCaptions?: boolean;
  component: "sectionHeroBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionHighlightsBlockStoryblok {
  body: (AtomSingleTitleStoryblok | AtomSingleBrowStoryblok)[];
  cards: (ISbStoryData<DataMagazineHighlightStoryblok> | string)[];
  component: "sectionHighlightsBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionJournalCarouselStoryblok {
  body?: (
    | AtomSingleBrowStoryblok
    | AtomSingleTitleStoryblok
    | AtomSingleParagraphStoryblok
    | AtomSingleIconStoryblok
  )[];
  cards: (ISbStoryData<TemplateJournalStoryblok> | string)[];
  invertOrder?: boolean;
  component: "sectionJournalCarousel";
  _uid: string;
  [k: string]: any;
}

export interface SectionJournalListingsStoryblok {
  message?: any;
  component: "sectionJournalListings";
  _uid: string;
  [k: string]: any;
}

export interface SectionLocationMapStoryblok {
  sectionTitle: (AtomSingleBrowStoryblok | AtomSingleTitleStoryblok)[];
  pointsOfInterestTitle?: string;
  pointsOfInterest: (ISbStoryData<DataPointsOfInterestStoryblok> | string)[];
  component: "sectionLocationMap";
  _uid: string;
  [k: string]: any;
}

export interface SectionMediaTilesStoryblok {
  media: AtomSingleMediaTileStoryblok[];
  component: "sectionMediaTiles";
  _uid: string;
  [k: string]: any;
}

export interface SectionPerksBlockStoryblok {
  perkData?: ISbStoryData<DataPerksStoryblok> | string;
  component: "sectionPerksBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionPropertyFloorplanStoryblok {
  component: "sectionPropertyFloorplan";
  _uid: string;
  [k: string]: any;
}

export interface SectionReviewsBlockStoryblok {
  sectionTitle: (AtomSingleBrowStoryblok | AtomSingleTitleStoryblok)[];
  reviews: (ISbStoryData<DataSingleReviewStoryblok> | string)[];
  component: "sectionReviewsBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionSignpostsBlockStoryblok {
  signposts: MoleculeSingleCardStoryblok[];
  component: "sectionSignpostsBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionSocialFeedStoryblok {
  component: "sectionSocialFeed";
  _uid: string;
  [k: string]: any;
}

export interface SectionStandaloneGraphicStoryblok {
  title: string;
  graphic: "" | "exploreExpressExhale" | "allYouNeedUnderOneRoof";
  component: "sectionStandaloneGraphic";
  _uid: string;
  [k: string]: any;
}

export interface SectionStepsBlockStoryblok {
  body?: (AtomSingleBrowStoryblok | AtomSingleTitleStoryblok)[];
  steps?: (ISbStoryData<DataSingleStepStoryblok> | string)[];
  component: "sectionStepsBlock";
  _uid: string;
  [k: string]: any;
}

export interface SectionTextWithCarouselStoryblok {
  data: ISbStoryData<DataTextWithCarouselStoryblok> | string;
  direction?: "" | "normal" | "reverse";
  imagePattern?: boolean;
  component: "sectionTextWithCarousel";
  _uid: string;
  [k: string]: any;
}

export interface SectionUniqueSellingPointsStoryblok {
  usps?: AtomUniqueSellingPointStoryblok[];
  component: "sectionUniqueSellingPoints";
  _uid: string;
  [k: string]: any;
}

export interface SectionUnitListingsStoryblok {
  message?: any;
  component: "sectionUnitListings";
  _uid: string;
  [k: string]: any;
}

export interface TemplateHomeStoryblok {
  heroPrimary: AtomSpacedTitleStoryblok[];
  body?: (
    | SectionUnitListingsStoryblok
    | SectionTextWithCarouselStoryblok
    | SectionStatementLargeStoryblok
    | SectionSocialFeedStoryblok
    | SectionSignpostsBlockStoryblok
    | SectionReviewsBlockStoryblok
    | SectionPropertyFloorplanStoryblok
    | SectionPerksBlockStoryblok
    | SectionPatternDividerStoryblok
    | SectionMediaTilesStoryblok
    | SectionLocationMapStoryblok
    | SectionGenericContentStoryblok
    | SectionGalleryCarouselStoryblok
    | SectionFitTextAndCardsStoryblok
    | SectionFaqBlockScannerStoryblok
    | SectionFaqBlockStoryblok
    | SectionContactFormStoryblok
    | SectionCardsBlockStoryblok
    | SectionApartmentTypesStoryblok
    | SectionApartmentFloorplansStoryblok
    | SectionAmenitiesCarouselStoryblok
    | SectionHeroBlockStoryblok
    | SectionJournalCarouselStoryblok
    | SectionHighlightsBlockStoryblok
    | SectionUniqueSellingPointsStoryblok
    | SectionFeaturedHomesStoryblok
  )[];
  component: "templateHome";
  _uid: string;
  [k: string]: any;
}

export interface TemplateJournalStoryblok {
  body: (
    | AtomBodyCopyStoryblok
    | AtomSingleMediaStoryblok
    | MoleculeTextMediaColsStoryblok
    | AtomBlockQuoteStoryblok
    | AtomSingleTitleStoryblok
  )[];
  media?: AssetStoryblok;
  showMediaCaptions?: boolean;
  publishedDate: string;
  component: "templateJournal";
  _uid: string;
  [k: string]: any;
}

export interface TemplateJournalCategoryStoryblok {
  component: "templateJournalCategory";
  _uid: string;
  [k: string]: any;
}

export interface TemplatePageStoryblok {
  heroPrimary: AtomSpacedTitleStoryblok[];
  media?: MultiassetStoryblok;
  showMediaCaptions?: boolean;
  body?: (
    | SectionUnitListingsStoryblok
    | SectionTextWithCarouselStoryblok
    | SectionStatementLargeStoryblok
    | SectionSocialFeedStoryblok
    | SectionSignpostsBlockStoryblok
    | SectionReviewsBlockStoryblok
    | SectionPropertyFloorplanStoryblok
    | SectionPerksBlockStoryblok
    | SectionPatternDividerStoryblok
    | SectionMediaTilesStoryblok
    | SectionLocationMapStoryblok
    | SectionGenericContentStoryblok
    | SectionGalleryCarouselStoryblok
    | SectionFitTextAndCardsStoryblok
    | SectionFaqBlockScannerStoryblok
    | SectionFaqBlockStoryblok
    | SectionContactFormStoryblok
    | SectionCardsBlockStoryblok
    | SectionApartmentTypesStoryblok
    | SectionApartmentFloorplansStoryblok
    | SectionAmenitiesCarouselStoryblok
    | SectionHeroBlockStoryblok
    | SectionJournalCarouselStoryblok
    | SectionHighlightsBlockStoryblok
    | SectionUniqueSellingPointsStoryblok
    | SectionFactsBlockStoryblok
    | SectionStandaloneGraphicStoryblok
    | SectionStepsBlockStoryblok
    | SectionEmbeddedFormStoryblok
  )[];
  component: "templatePage";
  _uid: string;
  [k: string]: any;
}

export interface TemplatePropertyStoryblok {
  body?: (
    | AtomBlockQuoteStoryblok
    | AtomBodyCopyStoryblok
    | AtomCircularCtaStoryblok
    | AtomFixedContentStoryblok
    | AtomPointOfInterestStoryblok
    | AtomSingleBrowStoryblok
    | AtomSingleCtaStoryblok
    | AtomSingleFactStoryblok
    | AtomSingleIconStoryblok
    | AtomSingleMediaStoryblok
    | AtomSingleMediaTileStoryblok
    | AtomSingleParagraphStoryblok
    | AtomSingleTitleStoryblok
    | AtomSpacedTitleStoryblok
    | AtomUniqueSellingPointStoryblok
    | DataApartmentTypesStoryblok
    | DataCallToActionStoryblok
    | DataMagazineHighlightStoryblok
    | DataNavItemStoryblok
    | DataPerksStoryblok
    | DataPointsOfInterestStoryblok
    | DataSingleFaqStoryblok
    | DataSingleReviewStoryblok
    | DataSingleStepStoryblok
    | DataSocialLinkStoryblok
    | DataTextIconPairStoryblok
    | DataTextWithCarouselStoryblok
    | MetaGlobalOptionsStoryblok
    | MoleculeIconListStoryblok
    | MoleculeNavSectionStoryblok
    | MoleculeParagraphColumnsStoryblok
    | MoleculeSectionTitleStoryblok
    | MoleculeSingleCardStoryblok
    | MoleculeTextMediaColsStoryblok
    | OrganismTextContentStoryblok
    | PaStoryblok
    | SectionAmenitiesCarouselStoryblok
    | SectionApartmentFloorplansStoryblok
    | SectionApartmentTypesStoryblok
    | SectionCardsBlockStoryblok
    | SectionContactFormStoryblok
    | SectionEmbeddedFormStoryblok
    | SectionFactsBlockStoryblok
    | SectionFaqBlockStoryblok
    | SectionFaqBlockScannerStoryblok
    | SectionFeaturedHomesStoryblok
    | SectionFitTextAndCardsStoryblok
    | SectionGalleryCarouselStoryblok
    | SectionGenericContentStoryblok
    | SectionGenericHeroStoryblok
    | SectionHeroBlockStoryblok
    | SectionHighlightsBlockStoryblok
    | SectionJournalCarouselStoryblok
    | SectionJournalListingsStoryblok
    | SectionLocationMapStoryblok
    | SectionMediaTilesStoryblok
    | SectionPerksBlockStoryblok
    | SectionPropertyFloorplanStoryblok
    | SectionReviewsBlockStoryblok
    | SectionSignpostsBlockStoryblok
    | SectionSocialFeedStoryblok
    | SectionStandaloneGraphicStoryblok
    | SectionStepsBlockStoryblok
    | SectionTextWithCarouselStoryblok
    | SectionUniqueSellingPointsStoryblok
    | SectionUnitListingsStoryblok
    | TemplateHomeStoryblok
    | TemplateJournalStoryblok
    | TemplateJournalCategoryStoryblok
    | TemplatePageStoryblok
    | TemplatePropertyStoryblok
    | TemplateRoomStoryblok
  )[];
  featuredPropertiesHeader: (AtomSingleTitleStoryblok | AtomSingleBrowStoryblok)[];
  featuredProperties?: (ISbStoryData<TemplateRoomStoryblok> | string)[];
  component: "templateProperty";
  _uid: string;
  [k: string]: any;
}

export interface TemplateRoomStoryblok {
  cardLabel?: string;
  component: "templateRoom";
  _uid: string;
  [k: string]: any;
}
